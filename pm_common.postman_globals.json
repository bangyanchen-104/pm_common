{
  "id": "a4031e7e-6461-49f0-834a-7ce5f5f90e1d",
  "values": [
    {
      "value": "class Utils \n{\n    static getGlobalVariable(key) {\n        return pm.globals.get(key);\n    }\n\n    static getEnvironmentVariable(key) {\n        return pm.environment.get(key);\n    }\n\n    static getVariable( key ) {\n        return pm.variables.get( key );\n    }\n\n    static setGlobalVariable( key, value ) {\n        pm.globals.set( key, value );\n    }\n\n    static setEnvironmentVariable( key, value ) {\n        pm.environment.set( key, value );\n    }\n    \n    static setVariable( key, value ) \n    {\n        pm.variables.set( key, value );\n    }\n\n    static removeGlobalVariable(key) {\n        pm.globals.unset(key);\n    }\n\n    static removeEnvironmentVariable(key) {\n        pm.environment.unset(key);\n    }\n\n    static removeVariable( key ) \n    {\n        if ( pm.variables.has( key ) )\n        {\n            pm.variables.unset(key);\n        }\n        else if ( this.hasEnvironmentVariable( key ) )\n        {\n            this.removeEnvironmentVariable( key )\n        }\n        else if ( this.hasGlobalVariable( key ) )\n        {\n            this.removeGlobalVariable( key );\n        }\n    }\n\n    static hasGlobalVariable( key )\n    {\n        return pm.globals.has( key );\n    }\n\n    static hasEnvironmentVariable( key )\n    {\n        return pm.environment.has( key );\n    }\n\n    static hasVariable( key )\n    {\n        if ( pm.variables.has( key ) )\n        {\n            return true;\n        }\n        if ( this.hasEnvironmentVariable( key ) )\n        {\n            return true;\n        }\n        if ( this.hasGlobalVariable( key ) )\n        {\n            return true;\n        }\n        return false;\n    }\n    // deprecated\n    static setObjectEnvironmentVariable(key, value) {\n        this.setEnvironmentVariable(key, JSON.stringify(value));\n    }\n    // deprecated\n    static getObjectEnvironmentVariable(key) {\n        return JSON.parse(this.getEnvironmentVariable(key));\n    }\n\n    // 不支援有重複相同屬性名稱的JSON\n    static getValueFromJsonString(jsonString, key) {\n        let value = null;\n        JSON.parse(jsonString,\n            (property, data) => {\n                if (property === key) {\n                    value = data;\n                }\n                return data;\n            }\n        );\n        return value;\n    }\n    // 不支援有重複相同屬性名稱的JSON\n    static getValueObjectFromJsonString(jsonString, ...keys) {\n        let vo = {};\n        for (let i = 0; i < keys.length; i++) {\n            vo[keys[i]] = null;\n        }\n\n        JSON.parse(jsonString,\n            (property, data) => {\n                if (vo.hasOwnProperty(property)) {\n                    vo[property] = data;\n                }\n                return data;\n            }\n        );\n        return vo;\n    }\n\n    static getQueryStringFromObject(query_object) {\n        let query_list = [];\n        for (let i in query_object) {\n            // 只將 value 有值的組成 array\n            if (query_object[i]) {\n                query_list.push(`${i}=${query_object[i]}`);\n            }\n        }\n        // array 有值才會組字串\n        return query_list.length > 0 ? `?${query_list.join('&')}` : '';\n    }\n    \n    static testCurRequestBodyWithObject(CurRequestBdoy, post_request_json_body) {\n        for (let i in post_request_json_body) {\n            Tests[`Test ${i}`] = JSON.stringify(post_request_json_body[i]) === JSON.stringify(CurRequestBdoy[i]);\n        }\n    }\n}\n",
      "key": "Utils",
      "enabled": true
    },
    {
      "value": "class InitializerBuilder\n{\n    static parseInitializer( codeString )\n    {\n        let headerRegExp = /initializer\\s*\\([\\s\\w,.]*\\)\\s*{/;\n        let result = headerRegExp.exec( codeString );\n        let start = result.index;\n        if ( start === -1 )\n        {\n            throw new Error( \"No Initializer\");\n        }\n        \n        let header = result[ 0 ].slice( 0, result[ 0 ].length - 1 );\n\n        let begin = start + header.length; // index of \"{\"\n        let body = this.getBoundedContent( codeString, \"{\", \"}\", begin );\n\n        return {    \n            header,\n            body,\n            index : result.index,\n            lastIndex : start + body.length + 1,  // index of \"}\"\n            content : `${ header }{${ body }}`\n        };\n    }\n\n    static getBoundedContent( string, leftBorder, rightBorder, start = 0 )\n    {\n        let stack = [];\n        let end = string.length;\n        for ( let index = start; index < end; index++ )\n        {\n            if ( string[ index ] === leftBorder )\n            {\n                if ( stack.length === 0 )\n                {\n                    start = index + 1;\n                }\n                stack.push( string[ index ] );        \n            }\n            else if ( string[ index ] === rightBorder )\n            {\n                if ( stack.pop() !== leftBorder )\n                {\n                    console.log( \"SyntaxError\");\n                    return;\n                }\n    \n                if ( stack.length === 0 )\n                {\n                    end = index;\n                    break;\n                }\n            }\n        }   \n        return string.slice( start, end );\n    }\n\n    static createNewInitializer( initializer, ...[ key, value ] )\n    {   \n        let newBodyContent = \" \";\n        if ( value )\n        {\n            newBodyContent = this.setInitializerBody( initializer.body, key, value );\n        }\n        else if ( key )\n        {\n            newBodyContent = this.removeInitializerBody(  initializer.body, key );\n        }      \n        return `${ initializer.header }{${ newBodyContent }}`; \n    }\n\n    static setInitializerBody( initializerBody, key, value )\n    {\n        initializerBody = this.removeInitializerBody( initializerBody, key );\n        \n        if ( typeof value === \"object\" )\n        {\n            value = JSON.stringify( value );\n        }\n        let appendantCode = `this.restoreAttribute( \"${ key }\", '${ value }' );`;\n    \n        return `${ initializerBody }\\n\\t\\t${ appendantCode } `;\n    }\n\n    static removeInitializerBody( initializerBody, key )\n    {\n        let removalPattern = new RegExp( `\\\\s*this\\\\.restoreAttribute\\\\(\\\\s*[\"']${ key }[\"']\\\\s*,.*\\\\);`, \"gm\" );\n        return initializerBody.replace( removalPattern, \"\" );     \n    }\n\n    static buildInitializer( ...parameters )\n    {\n        let contextCodeString = Utils.getVariable( \"TestContext\" );\n        let initializer = this.parseInitializer( contextCodeString );\n\n        let newContent = this.createNewInitializer( initializer, ...parameters )\n        Utils.setGlobalVariable( \"TestContext\", \n                                 contextCodeString.replace( initializer.content, newContent ) );\n        return newContent;\n    }\n}",
      "key": "InitializerBuilder",
      "enabled": true
    },
    {
      "value": "class RequestDispatcher {\n    static setNextRequest(requestName) {\n        postman.setNextRequest(requestName);\n    }\n\n    static repeatedRequest( testContext, expectedTimes, nextRequestName = null ) {\n        let initial = 1;\n        let requestName = testContext.requestName; // requestName 當作 key, 執行次數為 value\n        let times = testContext.getAttribute( requestName ); \n        console.log( \"times \" + times );\n        if ( times === undefined) {\n            times = initial;\n        }\n        else {\n            times = parseInt(times, 10) + 1;\n        }\n        console.log( \"Repeated times : \" +  times );\n        testContext.setEnvironmentAttribute( requestName, times );\n        \n        if ( times < expectedTimes ) {\n            this.setNextRequest( requestName );\n            console.log( \"Next Request : \" + testContext.requestName );\n        }\n        else {\n            testContext.removeAttribute( requestName );\n            this.setNextRequest( nextRequestName );\n            if ( nextRequestName ) {\n                console.log( \"Next Request : \" + nextRequestName );\n            }\n        }\n    }\n\n    static getCurrentRepetition( testContext ) {\n        let times = testContext.getAttribute( testContext.requestId );\n        if (times === undefined) {\n            return 0;\n        }\n        else {\n            return parseInt( times, 10 );\n        }\n    }\n\n    static setTestCaseRequest(test_case_object) {\n        // 存在才會\b setNextRequest\n        // 判斷順序 Setup > Test > Teardown > NextTest\n        console.log(test_case_object)\n        let NextReq = null;\n        if (test_case_object.Setup.length > 0) {\n            NextReq = test_case_object.Setup.shift();\n        } else if (test_case_object.Test.length > 0) {\n            NextReq = test_case_object.Test.shift();\n        } else if (test_case_object.Teardown.length > 0) {\n            NextReq = test_case_object.Teardown.shift();\n        } else {\n            NextReq = test_case_object.NextTest;\n        }\n        console.log(\"Next Request : \" + NextReq);\n        this.setNextRequest(NextReq);\n        return test_case_object\n    }\n}",
      "key": "RequestDispatcher",
      "enabled": true
    },
    {
      "value": "class TestManager\n{\n    constructor()\n    {\n        this.testContext = null;\n        this.testSelector = null;\n        this.testReporter = null;\n        this.testAsserter = null;\n        this.testTemplate = null;\n        this.testObject = null;\n    \n    }\n\n    import( libName )\n    {\n        return eval( `( ${ pm.variables.get( libName ) } )` );\n    }\n\n    getTestContext()\n    {   \n        if ( !this.testContext )\n        {   \n            this.testContext = SimpleFactory.createContext();\n        } \n        return this.testContext;\n    }\n\n    getTestSelector()\n    {\n        if ( !this.testSelector )\n        {   \n            this.testSelector = SimpleFactory.createSelector();\n        }\n        return this.testSelector;\n    }\n\n    getTestReporter()\n    {   \n        if ( !this.testReporter )\n        {\n            this.testReporter = SimpleFactory.createReporter();\n        } \n        return this.testReporter; \n    }\n\n    getTestAsserter()\n    {\n        if ( !this.testAsserter )\n        {\n            const reporter = this.getTestReporter();\n            const asserter = SimpleFactory.createAsserter( reporter );\n            const proxyHandler = { \n                set( targetAsserter, key, value )\n                {\n                    reporter.addTestResult( key, value );\n                    return Reflect.set( targetAsserter, key, value );\n                }\n            };\n            this.testAsserter = new Proxy( asserter, proxyHandler );\n        }\n        return this.testAsserter;\n    }\n\n    getTestTemplate()\n    {\n        if ( !this.testTemplate )\n        {                         \n            this.testTemplate = this.createTestObject(  SimpleFactory.templateConstructor );\n        }\n        return this.testTemplate;\n    }\n\n    createTestObject( TestClass )\n    {   \n        const context = this.getTestContext();\n        const selector = this.getTestSelector();\n        const reporter = this.getTestReporter();\n        \n        const proxyHandler = { \n            get( targetObj, key )\n            {\n                const value = Reflect.get( targetObj, key );\n                // if ( typeof value === \"function\" )\n                // {\n                //     console.log( `Executing : ${ key }()` );\n                // } \n                return value;\n            }\n        };\n        const obj = new TestClass( context, selector, reporter );\n        return new Proxy( obj, proxyHandler );\n    }\n\n    executeTests( TestClass )\n    {\n        this.testObject = this.createTestObject( TestClass );\n        const TestLauncher = eval( this.launcherCodeString );\n        \n        SimpleFactory.createLauncher( this.testObject ).execute();\n    }\n}\n\n",
      "key": "TestManager",
      "enabled": true
    },
    {
      "value": "class TestLauncher\n{   \n    constructor( testObj )\n    {\n        this.testObject = testObj;\n        this.testClass = testObj.constructor;\n        this._methodNames = [];\n    }\n\n    discover()\n    {\n        const testPrototype = Object.getPrototypeOf( this.testObject );\n        for ( let eachPropertyName of Object.getOwnPropertyNames( testPrototype ) )\n        {\n            if ( this._isTestableMethod( eachPropertyName ) )\n            {\n                this._methodNames.push( eachPropertyName );  \n            } \n        }\n    }\n\n    execute() \n    {\n        const testObject = this.testObject;\n\t\ttry {\n            console.log( `${ testObject.context.requestName } :` );\n\t\t\n            this._call( \"setUp\" );\n\n\t\t\twhile ( testObject.selector.hasNext() ) \n\t\t\t{   \n\t\t\t\tlet calleeName = testObject.selector.next( testObject );\n\n                if ( this._isCallableMethod( calleeName, testObject ) )\n                {   \n                    this._call( \"beforeEachTest\" );\n                    \n                    this._call( \"before_\" + calleeName );\n\n                    this._call( calleeName ); // main test function\n\n                    this._call( \"after_\" + calleeName );\n                    \n                    this._call( \"afterEachTest\" );\n                }\n                else \n                {\n                    this._call( \"unexpected\" );\n                }\n            }\n        }\n        catch (error) \n        {\n            const errMsg = `${ error.name } : ${ error.message }`;\n            console.log( errMsg );       \n            testObject.reporter.addTestResult( errMsg, false );\n        }\n        finally \n        {\n            this._call( \"tearDown\" );\n            if ( testObject.reporter )\n            {   \n                testObject.reporter.results();\n            }   \n        }\n    }\n\n    _call( methodName )\n    {\n        if ( this._isCallableMethod( methodName, this.testObject ) )\n        {\n            const proxyLogger = { \n                apply( targetMethod, cxt, args )\n                {\n                    if ( targetMethod.name !== \"unexpected\" )\n                    {\n                        console.log( `Executing : ${ targetMethod.name }()` );\n                    }\n                    else\n                    {\n                        console.log( \"unexpected condition : no matched method\");\n                    }\n                    return Reflect.apply( targetMethod, cxt, args );\n                }\n            };\n            return new Proxy( this.testObject[ methodName ], proxyLogger ).apply( this.testObject );\n        }\n    }\n\n    _isCallableMethod( propertyName )\n    {\n        return ( propertyName in this.testObject ) && ( typeof this.testObject[ propertyName ] === \"function\" );\n    }\n\n    _isTestableMethod( propertyName )\n    {\n        const isFunction = typeof this.testObject[ propertyName ] === \"function\"; \n        const isConstructor = this.testObject[ propertyName ] === this.testClass;\n        const isTemplateMethod = [ \"setUp\", \"tearDown\", \"unexpected\" ].includes( propertyName );\n\n        return isFunction && !isConstructor && !isTemplateMethod;\n    }\n}",
      "key": "TestLauncher",
      "enabled": true
    },
    {
      "value": "class TestContext\n{\n    constructor() {\n        this._attributes = new Map();\n        this.autoClear = false;\n       \n        this.initializer();\n    }\n\n    initializer() { \n\t\tthis.restoreAttribute( \"jobNo\", '10054286' ); \n\t\tthis.restoreAttribute( \"switch\", 'on' ); }\n\n    // request info\n    get requestName() {\n        return pm.info.requestName;\n    }\n    get requestId() {\n        return pm.info.requestId;\n    }\n    get requestUrl() {\n        return pm.request.url;\n    }\n    get requestBodyText() {\n        return pm.request.body[ pm.request.body.mode ];\n    }\n    get requestBodyJson() {\n        return JSON.parse( this.requestBodyText );\n    }\n    // response info\n    get statusText() {\n        return pm.response.status;\n    }\n    get statusCode() {\n        return pm.response.code;\n    }\n    get responseTime() {\n        return pm.response.responseTime;\n    }\n    get responseText() {\n        return pm.response.text();\n    }\n    get responseJson() {\n        return pm.response.json();\n    }\n    // others\n    hasAttribute( key )\n    {\n        return this._attributes.has( key );\n    }\n\n    getAttribute( key )\n    {\n        return this._attributes.get( key ); \n    }\n\n    getAttributeNames()\n    {\n        return this._attributes.keys();\n    }\n\n    setAttribute( key, value )\n    {\n        this._attributes.set( key, value );\n        Object.defineProperty( this, key,  \n                { \n                    configurable : true,\n                    enumerable : true,   \n                    get : () => { return this.getAttribute( key ) },\n                    set : ( value ) => { this.setAttribute( key, value ) }\n                }                                  \n        );\n        InitializerBuilder.buildInitializer( key, value );  \n    }\n\n    setGlobalAttribute( key, value )\n    {\n        this.setAttribute( key, value );\n        Utils.setGlobalVariable( key, value );\n    }\n\n    setEnvironmentAttribute( key, value )\n    {\n        this.setAttribute( key, value );\n        Utils.setEnvironmentVariable( key, value );\n    }\n\n    restoreAttribute( key, value )\n    {\n        try\n        {\n            if ( Utils.hasVariable( key ) )\n            {\n                value = Utils.getVariable( key );\n            }\n            else\n            {\n                value = JSON.parse( value );\n            }   \n        }\n        catch( err )\n        {\n                   \n        }\n        this.setAttribute( key, value );\n\n        return value;\n    }\n\n    removeAttribute( key )\n    {\n        this._attributes.delete( key );\n\n        delete this[ key ];\n\n        Utils.removeVariable( key );\n\n        InitializerBuilder.buildInitializer( key );\n    }\n\n    clearAttributes()\n    {\n        for ( let eachName of this.getAttributeNames() ) \n        {\n            delete this[ eachName ];\n            Utils.removeVariable( eachName );\n        }\n\n        this._attributes.clear();\n\n        InitializerBuilder.buildInitializer();\n    }\n\n    toString() \n    {\n        let displayedMessage = \"\";\n        for ( let [ key, value ] of this._attributes.entries() ) {\n            displayedMessage += `${ key} : ${ value }\\t`;\n          }\n        return displayedMessage;\n    }\n}",
      "key": "TestContext",
      "enabled": true
    },
    {
      "value": "class TestSelector \n{\n    constructor()\n    {\n        this.selectors = [];\n        this.step = 0;\n        this._conditions = new Map();\n        this._conditions.set( \"common_condition\", [] );\n\n        this.schedule( [ \"common_tests\" ] );\n        this.addSelector( this.selectHttpStatus );\n        this._prefixes = [ \"test\", \"expect\", \"assert\", \"assume\" ];\n    }\n\n    clearSelectors() {\n        this.selectors = [];\n    }\n\n    addSelector(selector) {\n        if ( typeof selector === \"function\" ) {\n            this.selectors.push(selector);\n        }\n        else if ( typeof selector === \"string\") {\n            this.selectors.push( () => selector );\n        }\n    }\n\n    schedule( selectors ) // reset selectors\n    {\n        this.clearSelectors();\n\n        for (let selector of selectors) \n        {\n            this.addSelector(selector);\n        }\n    }\n\n    selectHttpStatus( testObject ) \n    {   \n        let status = testObject.context.statusText.replace(/ /g, \"_\").toLowerCase();\n        return \"expect_\" + status + \"_\" + testObject.expectedCode; \n    }\n\n   \n\n    // methods of iterator\n    hasNext()\n    {\n        return this.step < this.selectors.length;\n    } \n\n    next( testObject )\n    {   \n        return this.selectors[ this.step++ ]( testObject );\n    }\n\n    _startsWithPrefix( methodName )\n    {\n        for ( let prefix of this._prefixes )\n        {\n            if ( methodName.startsWith( prefix ) )\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _fetchCondition( methodName )\n    {\n        let condition = \"\";\n        const index = methodName.indexOf( \"if\" ) + \"if\".length + 1;\n        \n        if ( this._isConditional( methodName ) )\n        {\n            condition = methodName.slice( index );\n\n            this._dispatchMethodByCondition( methodName, condition );\n        }\n        else\n        {\n            this._dispatchMethodByCondition( methodName, \"common_condition\" )\n        }\n        return condition;\n    }\n\n    _isConditional( methodName )\n    {\n        if ( methodName.indexOf( \"if\" ) !== -1)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    _dispatchMethodByCondition( methodName, condition )\n    {\n        if ( !this._conditions.has( condition ) )\n        {\n            this._conditions.set( condition, [] );        \n        }   \n        this._conditions.get( condition ).push( methodName ); \n    }\n}",
      "key": "TestSelector",
      "enabled": true
    },
    {
      "value": "class TestReporter {\n    constructor() {\n        this._results = new Map();\n    }\n    // 以 message 回傳指定 test result\n    getTestResult( message ) {\n        let result = this._results.get(message);\n\n        if (typeof result === \"undefined\") {\n            result = this[message];\n        }\n\n        return result;\n    }\n\n    addTestResult( message, result )\n    {   \n        this._results.set( message, result );\n\n        return this;\n    }\n\n    results() {\n        if ( this._results.size > 0) {\n            for ( let [msg, value] of this._results.entries()) {\n                tests[ msg ] = value; // pm syntax\n            }\n        }\n        for (let pName of Object.keys(this)) // Object.keys() => array\n        {\n            if (typeof this[pName] === \"boolean\") {\n                tests[pName] = this[pName]; // pm syntax\n            }\n        }\n    }\n}",
      "key": "TestReporter",
      "enabled": true
    },
    {
      "value": "class TestTemplate \n{\n    constructor( context, selector, reporter ) \n    {\n        this.context = context;\n        this.selector = selector;\n        this.reporter = reporter;\n        // default expected value\n        this.expectedCode = 200;\n        this.expectedResponseTime = 3000;\n    }\n\n\tsetUp() \n\t{\n\t\tconsole.log( \"SUPPPPER\" );\n\t}\n\n    common_tests() \n    {\n\t\tconst cxt = this.context;\n\t\tthis.reporter.addTestResult( `Http status code : ${ cxt.statusCode }`, cxt.statusCode === this.expectedCode )\n                     .addTestResult( `Response time : ${ cxt.responseTime } ms`, cxt.responseTime <= this.expectedResponseTime );               \n\t}\n\n\tunexpected()\n\t{\n\t\tthis.reporter.addTestResult( \"unexpected condition : no matched method\", false );\n\t}\n\n\ttearDown() {\n\t\tif ( this.context.autoClear )\n\t\t{\n\t\t\tthis.context.clearAttributes();\n\t\t}\n\t}\n}",
      "key": "TestTemplate",
      "enabled": true
    },
    {
      "value": "class TestAsserter\n{\n    constructor( reporter )\n    {\n        this._reporter = reporter;\n    }\n\n    assertEquals( expected, actual, message = `Expected : ${ expected}, Actual : ${ actual}`, compare = undefined ) \n    {\n        let result;\n        \n        if (typeof compare === \"function\") {\n            result = compare( expected, actual );\n        }\n        else {\n            result = expected === actual;\n        }\n\n        if ( !result ) {\n            let error = new Error( message );\n            error.name = \"Assertion Error\";\n\n            throw error;\n        }\n        this.report( message, result );\n\n        return this;\n    }\n\n    assertSame( expectedObject, actualObject, message )\n    {\n        const expected = JSON.stringify( expectedObject );\n        const actual = JSON.stringify( actualObject );\n\n        this.assertEquals( expected, actual, message );\n    }\n\n    assertContains( superobject, subobject, message ) // superobject contains subobject\n    {\n        let result = true;\n        \n        for ( let eachProperty in subobject ) \n        {   \n            let subobjectPropertyValue = JSON.stringify( subobject[ eachProperty ] );\n            let superobjectPropertyValue = JSON.stringify( superobject[ eachProperty ] );\n            let partOfResult = subobjectPropertyValue === superobjectPropertyValue;\n\n            this.report( \n                `${ eachProperty } : ${ subobjectPropertyValue } === ${ superobjectPropertyValue }`, partOfResult );\n            result = result && partOfResult;\n        }\n        this.assertTrue( result, message );\n    }\n\n    assertFalse( result, message ) \n    {\n        this.assertEquals( false, result, message );\n    }\n\n    assertTrue( result, message ) \n    {\n        this.assertEquals( true, result, message );\n    }\n\n    fail( message )\n    {\n        this.assertEquals( true, false, message );\n    }\n\n    report( message, result )\n    {\n        if ( this._reporter )\n        {   \n            this._reporter.addTestResult( message, result );\n        }\n        else\n        {\n            const error = new Error( \"TestReporter doesn't exist\" );\n            error.name = \"Initialization Error\";\n\n            throw error;\n        }\n    }\n}",
      "key": "TestAsserter",
      "enabled": true
    },
    {
      "value": "var Utils = eval( \"(\" + pm.variables.get( \"Utils\" ) + \")\" );\nvar TestManager = new ( eval( \"(\" + Utils.getVariable( \"TestManager\" ) + \")\" ) )();\nvar RequestDispatcher = eval( \"(\" + Utils.getVariable( \"RequestDispatcher\" ) + \")\" );\nvar InitializerBuilder = eval( \"(\" + Utils.getVariable( \"InitializerBuilder\" ) + \")\" );\nvar TestTemplate = eval( \"(\" + Utils.getVariable( \"TestTemplate\" ) + \")\" );\nvar Tests = TestManager.getTestAsserter();",
      "key": "pm_common",
      "enabled": true
    },
    {
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "value": "class SimpleFactory\n{\n  \n    static createManager()\n    {\n        return new ( this.managerConstructor )();\n    }\n    static get managerConstructor()\n    {\n        return eval( this.managerCodeString );\n    }\n    static get managerCodeString()\n    {\n        return `( ${ pm.variables.get( \"TestManager\" ) } )`;\n    }\n    \n    static createContext()\n    {\n        return new ( this.contextConstructor )();\n    }\n    static get contextConstructor()\n    {\n        return eval( this.contextCodeString );\n    }\n    static get contextCodeString()\n    {\n        return `( ${ Utils.getVariable( \"TestContext\" ) } )`;\n    }\n    \n    static createReporter()\n    {\n        return new ( this.reporterConstructor )();\n    }\n    static get reporterConstructor()\n    {\n        return eval( this.reporterCodeString );\n    }\n    static get reporterCodeString()\n    {\n        return `( ${ Utils.getVariable( \"TestReporter\" ) } )`;\n    } \n    \n    static createAsserter( reporter )\n    {  \n        return new ( this.asserterConstructor )( reporter );\n    }\n    static get asserterConstructor()\n    {\n        return eval( this.asserterCodeString );\n    }\n    static get asserterCodeString()\n    {\n        return `( ${ Utils.getVariable( \"TestAsserter\" ) } )`;\n    }\n    \n    static createTemplate( ...args )\n    {  \n        return new ( this.templateConstructor )( ...args );\n    }\n    static get templateConstructor()\n    {\n        return eval( this.templateCodeString );\n    }\n    static get templateCodeString()\n    {\n        return `( ${ Utils.getVariable( \"TestTemplate\" ) } )`;   \n    } \n\n    static createSelector( ...args )\n    {  \n        return new ( this.selectorConstructor )( ...args );\n    }\n    static get selectorConstructor()\n    {\n        return eval( this.selectorCodeString );\n    }\n    static get selectorCodeString()\n    {\n        return `( ${ Utils.getVariable( \"TestSelector\" ) } )`;\n    } \n    \n    static createLauncher( testObject )\n    {  \n        return new ( this.launcherConstructor )( testObject );\n    }\n    static get launcherConstructor()\n    {\n        return eval( this.launcherCodeString );\n    }\n    static get launcherCodeString()\n    {\n        return `( ${ Utils.getVariable( \"TestLauncher\" ) } )`; \n    } \n\n}",
      "key": "SimpleFactory",
      "enabled": true
    }
  ],
  "name": "PM_Tester Globals",
  "_postman_variable_scope": "globals",
  "_postman_exported_at": "2018-08-19T13:07:49.594Z",
  "_postman_exported_using": "Postman/6.2.4"
}