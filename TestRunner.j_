function TestRunner() 
{
    this.addResponseHandler =
    function( f )
    {
        if ( ( typeof f ) === "function" )
        {
            this[ f.name ] = f;
        }
    };

    this.run =
    function( context )
    {   
        this.tryToCall( "setUp", context );
        
        let statusText = context.statusText.replace( / /g, "_" ).toLowerCase();
        let expectedCode = context.expectedCode;
        let functionName = "expect_" + statusText + "_" + expectedCode;


        if ( this.tryToCall( functionName, context) )
        {
            console.log( "executing : " + functionName );
        }
        else
        {
            console.log( "unexpected result : no matched function" );
            this.tryToCall( "unexpected", context );
        }

        this.tryToCall( "tearDown", context );
    };

    this.tryToCall = 
    function( fName, ...args )
    {
        if ( this.hasOwnProperty( fName ) && ( typeof this[ fName ] === "function" ) )
        {
            this[ fName ]( ...args );
            return true;
        }
        else if ( eval( "typeof " + fName ) === "function" )
        {
            eval( fName + "( ...args )" );
            return true;
        } 
        return false;   
    };
}